{"version":3,"sources":["components/AddCategoria.js","components/GifGridItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpert.js","index.js"],"names":["AddCategoria","setcategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","evento","target","GifGridItem","id","title","urlImage","className","src","alt","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imagenes","useFetchGifs","GiftExpert","categorias","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,mCAGI,sBAAMC,SAhBO,SAACC,GAElBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAUd,SACA,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAxBkB,SAACC,GACvBV,EAAcU,EAAOC,OAAOH,e,QCNvBI,EAAc,SAAC,GAAwB,EAAvBC,GAAwB,IAArBC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SAElC,OACI,sBAAKC,UAAU,wCAAf,UACI,qBAAKC,IAAKF,EAAUG,IAAKJ,IACzB,4BAAIA,Q,uBCLHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAE3B,MAAO,CACLjB,GAAIiB,EAAIjB,GACRC,MAAMgB,EAAIhB,MACVC,SAAQ,UAACe,EAAIC,cAAL,aAAC,EAAYC,iBAAiBV,QAG1CW,QAAQC,IAAIN,GAZO,kBAcZA,GAdY,4CAAH,sDCGPO,EAAU,SAAC,GAAiB,IAAhBf,EAAe,EAAfA,UAIvB,ECL0B,SAACA,GAG1B,MAA0BtB,mBAAS,CAC/B6B,KAAK,GACLS,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAlBAC,qBAAW,WACVpB,EAAQC,GAAWoB,MAAM,SAACC,GAElBH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAIpB,CAAChB,IASIiB,EDtBsBK,CAAatB,GAA/BW,EAAZ,EAAOJ,KAAYS,EAAnB,EAAmBA,QAsBjB,OAGE,cAFI,CAEJ,sBACA,6BAAKhB,IAEJgB,GAAW,4CACV,qBAAKpB,UAAU,YAAf,SAGIe,EAAOF,KAAK,SAACC,GACX,OAAO,cAAC,EAAD,eAEDA,GADCA,EAAIjB,aEvCZ8B,EAAa,WAEtB,MAAoC7C,mBAAS,CAAC,aAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAYA,OACI,qCACA,oBAAImB,UAAU,wCAAd,qBACA,cAAC,EAAD,CAAcnB,cAAeA,IAC7B,uBAGA,6BAEQ+C,EAAWf,KAAK,SAACT,GACb,OAAO,cAAC,EAAD,CAEPA,UAAaA,GADPA,Y,MCtB1ByB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.016968e4.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport PropTypes from 'prop-types'\n//rafc  snippet\nexport const AddCategoria = ({setcategorias}) => {\n\n    const [inputValue, setinputValue] = useState('');\n    \n    const handleInputChange = (evento)=>{\n        setinputValue(evento.target.value);\n    }\n\n    const handleSubmit = (e)=>{\n        //PREVIENE QUE SE RECARGUE LA PAGINA \n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            \n            setcategorias(cats => [ inputValue, ...cats]);\n            setinputValue('');\n        }\n        \n\n    }\n\n    return (\n        <>  \n            {/* INPUT VALUE TIENE EL ULTIMO VALOR ACTUALIZADO */}\n            {/* <h1>{inputValue}</h1> */}\n            <form onSubmit={handleSubmit}>\n            <input \n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            ></input>\n            </form>\n            \n        </>\n    )\n}\nAddCategoria.propTypes = {\n    setcategorias: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,urlImage}) => {\n    // console.log(id,title,urlImage);\n    return (\n        <div className=\"card animate__animated animate__pulse\">\n            <img src={urlImage} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","// import React from 'react'\n\nexport const getGifs = async(categoria) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria) }&limit=5&api_key=rMPt7EcS3v6kEeo2MvAzpz727Pf8BXTM`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img => {\n      //el signo de interrogacion es para asegurarnos que trae imagenes\n      return {\n        id: img.id,\n        title:img.title,\n        urlImage:img.images?.downsized_medium.url\n      }\n    });\n    console.log(gifs);\n    //EL NUEVO ESTADO SON LOS GIFS QUE RECIBO\n    return gifs;\n\n\n  }\n","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/GetGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({categoria}) => {\n\n  // const [images, setImages] = useState([]);\n//para renombrar es data: nombre\n  const {data:images,loading} = useFetchGifs(categoria);\n  // console.log(data);\n  // console.log(loading);\n\n\n  // EL [] ES UN ARREGLO DE DEPENDENCIAS, \n  // SI LO MANDAMOS VACIO OSEA QUE NO TIENE DEPENDECIAS\n  //EL USE EFFECT SOLO SE DISPARA 1 VEZ\n  //si la categoria cambia tendria que volver a ejecutar esto de abajo\n  //EN ESTE CASO NO SUCEDE POR COMO TENEMOS LA LOGICA\n  //sirve por si queremos volver a disparar la peticion htpt\n  \n  // useEffect( ()=>{\n  //   getGifs(categoria)\n\n    // .then( (imagenes) => setImages(imagenes))\n    // MAS CORTO PORQUE SOLO ES UN ARGUMENTO MANDADO EN LA PRIMERA POSICION\n\n  //   .then(setImages);\n  // },[categoria]);\n\n\n    return (\n          // images.map( img => {\n          //   return <li key={img.id}>{img.title}</li>\n      <>\n      <h3>{categoria}</h3> \n      {/* {loading ? 'Cargando...' : 'Termino de cargar'} */}\n      {loading && <p>Cargando...</p>}\n        <div className=\"card-grid\">\n            {\n            \n            images.map( (img) => {\n              return <GifGridItem\n                key={img.id}\n                {...img}\n              />\n            })\n\n            }\n        </div>\n        \n      </>       \n    )\n}\n","import {useState, useEffect} from 'react'\nimport { getGifs } from '../helpers/GetGifs';\n\n\nexport const useFetchGifs = (categoria) => {\n    //la primera vez que se use tendra esta data\n    //por defecto\n   const [state, setState] = useState({\n       data:[],\n       loading:true\n   }); \n// SE USA ESTE EFECTO CUANDO LA CATEGORIA CAMBIA, ES DECIR LA PRIMERA VEZ\n// AHI SE DISPARA. NO PUEDEN SER ASYNC\n   useEffect( ()=>{\n    getGifs(categoria).then( (imagenes) =>{\n        \n            setState({\n                data: imagenes,\n                loading: false\n            });\n       \n    });\n   },[categoria])\n\n//    setTimeout(() => {\n//        setState({\n//         data:[1,2,3,4,5,6],\n//         loading:false\n//     })\n//    }, 3000);\n\n   return state;\n\n}\n","import React, { useState } from 'react'\nimport { AddCategoria } from './components/AddCategoria';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GiftExpert = () => {\n    // const categorias = ['Hellsing', 'Ranme 1/2', 'Dragon Ball'];\n    const [categorias, setcategorias] = useState(['Hellsing']);\n    // const  handleAdd = () => {\n        //AGREGAR ELEMENTOS A UN ARREGLO\n        // PARA PONERLO AL PRINCIPIO\n        // setcategorias([\"Wolf's Rain\", ...categorias, ]);\n        // PARA PONERLO SEGUNDO\n        // setcategorias([...categorias, \"Wolf's Rain\"]);\n        //RECIBE UN CALLBACK, REGRESA UN NUEVO ARREGLO CON TODAS LAS CATEGORIAS\n        //EL PRIMER CATS EN EL VALOR ANTERIOR Y REGRESA EL NUEVO ESTADO\n    //     setcategorias(cats => [...cats, \"Wolf's Rain\"])\n    // }\n\n    return (\n        <>\n        <h1 className=\"animate__animated animate__fadeInDown\">Gif APP</h1>\n        <AddCategoria setcategorias={setcategorias} />\n        <hr/>\n        {/* <button onClick={handleAdd} >Agregar</button> */}\n\n        <ol>\n            {\n                categorias.map( (categoria)=>{\n                    return <GifGrid \n                    key= {categoria}\n                    categoria = {categoria}>\n\n                    </GifGrid>\n                    // <li key={categoria}> {categoria}</li>\n                })\n            }\n        </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpert } from './GifExpert';\nimport './index.css';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GiftExpert />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}